package kz.paysoft.paymobile.ui.pmclient.model.entities;

import kz.paysoft.paymobile.ui.adfextensions.ExtendedEntityImpl;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 10 08:06:07 BDST 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContractImpl extends ExtendedEntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(ContractImpl obj) {
                return obj.getId();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Status {
            public Object get(ContractImpl obj) {
                return obj.getStatus();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        Date {
            public Object get(ContractImpl obj) {
                return obj.getDate();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setDate((Date)value);
            }
        }
        ,
        User {
            public Object get(ContractImpl obj) {
                return obj.getUser();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ClientId {
            public Object get(ContractImpl obj) {
                return obj.getClientId();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setClientId((Number)value);
            }
        }
        ,
        Si {
            public Object get(ContractImpl obj) {
                return obj.getSi();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setSi((Number)value);
            }
        }
        ,
        Status1 {
            public Object get(ContractImpl obj) {
                return obj.getStatus1();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setStatus1((String)value);
            }
        }
        ,
        OpenDate {
            public Object get(ContractImpl obj) {
                return obj.getOpenDate();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        AppliedAt {
            public Object get(ContractImpl obj) {
                return obj.getAppliedAt();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setAppliedAt((Date)value);
            }
        }
        ,
        PhoneNumber {
            public Object get(ContractImpl obj) {
                return obj.getPhoneNumber();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setPhoneNumber((Number)value);
            }
        }
        ,
        Sc {
            public Object get(ContractImpl obj) {
                return obj.getSc();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PasswordTries {
            public Object get(ContractImpl obj) {
                return obj.getPasswordTries();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setPasswordTries((Number)value);
            }
        }
        ,
        CipherSuite {
            public Object get(ContractImpl obj) {
                return obj.getCipherSuite();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setCipherSuite((String)value);
            }
        }
        ,
        CloseDate {
            public Object get(ContractImpl obj) {
                return obj.getCloseDate();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setCloseDate((Date)value);
            }
        }
        ,
        ANumber {
            public Object get(ContractImpl obj) {
                return obj.getANumber();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setANumber((String)value);
            }
        }
        ,
        Hu {
            public Object get(ContractImpl obj) {
                return obj.getHu();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setHu((Number)value);
            }
        }
        ,
        Cid {
            public Object get(ContractImpl obj) {
                return obj.getCid();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Account {
            public Object get(ContractImpl obj) {
                return obj.getAccount();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Client {
            public Object get(ContractImpl obj) {
                return obj.getClient();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setClient((ExtendedEntityImpl)value);
            }
        }
        ,
        NotClosedContractsByPhoneNumber {
            public Object get(ContractImpl obj) {
                return obj.getNotClosedContractsByPhoneNumber();
            }

            public void put(ContractImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ContractImpl object);

        public abstract void put(ContractImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int DATE = AttributesEnum.Date.index();
    public static final int USER = AttributesEnum.User.index();
    public static final int CLIENTID = AttributesEnum.ClientId.index();
    public static final int SI = AttributesEnum.Si.index();
    public static final int STATUS1 = AttributesEnum.Status1.index();
    public static final int OPENDATE = AttributesEnum.OpenDate.index();
    public static final int APPLIEDAT = AttributesEnum.AppliedAt.index();
    public static final int PHONENUMBER = AttributesEnum.PhoneNumber.index();
    public static final int SC = AttributesEnum.Sc.index();
    public static final int PASSWORDTRIES = AttributesEnum.PasswordTries.index();
    public static final int CIPHERSUITE = AttributesEnum.CipherSuite.index();
    public static final int CLOSEDATE = AttributesEnum.CloseDate.index();
    public static final int ANUMBER = AttributesEnum.ANumber.index();
    public static final int HU = AttributesEnum.Hu.index();
    public static final int CID = AttributesEnum.Cid.index();
    public static final int ACCOUNT = AttributesEnum.Account.index();
    public static final int CLIENT = AttributesEnum.Client.index();
    public static final int NOTCLOSEDCONTRACTSBYPHONENUMBER = AttributesEnum.NotClosedContractsByPhoneNumber.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ContractImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("kz.paysoft.paymobile.ui.pmclient.model.entities.Contract");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public DBSequence getId() {
        return (DBSequence)getAttributeInternal(ID);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the Status
     */
    public String getStatus() {
        return (String)getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for Date, using the alias name Date.
     * @return the Date
     */
    public Date getDate() {
        return (Date)getAttributeInternal(DATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Date.
     * @param value value to set the Date
     */
    public void setDate(Date value) {
        setAttributeInternal(DATE, value);
    }

    /**
     * Gets the attribute value for User, using the alias name User.
     * @return the User
     */
    public String getUser() {
        return (String)getAttributeInternal(USER);
    }

    /**
     * Gets the attribute value for ClientId, using the alias name ClientId.
     * @return the ClientId
     */
    public Number getClientId() {
        return (Number)getAttributeInternal(CLIENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ClientId.
     * @param value value to set the ClientId
     */
    public void setClientId(Number value) {
        setAttributeInternal(CLIENTID, value);
    }

    /**
     * Gets the attribute value for Si, using the alias name Si.
     * @return the Si
     */
    public Number getSi() {
        return (Number)getAttributeInternal(SI);
    }

    /**
     * Sets <code>value</code> as the attribute value for Si.
     * @param value value to set the Si
     */
    public void setSi(Number value) {
        setAttributeInternal(SI, value);
    }

    /**
     * Gets the attribute value for Status1, using the alias name Status1.
     * @return the Status1
     */
    public String getStatus1() {
        return (String)getAttributeInternal(STATUS1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status1.
     * @param value value to set the Status1
     */
    public void setStatus1(String value) {
        setAttributeInternal(STATUS1, value);
    }

    /**
     * Gets the attribute value for OpenDate, using the alias name OpenDate.
     * @return the OpenDate
     */
    public Date getOpenDate() {
        return (Date)getAttributeInternal(OPENDATE);
    }

    /**
     * Gets the attribute value for AppliedAt, using the alias name AppliedAt.
     * @return the AppliedAt
     */
    public Date getAppliedAt() {
        return (Date)getAttributeInternal(APPLIEDAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for AppliedAt.
     * @param value value to set the AppliedAt
     */
    public void setAppliedAt(Date value) {
        setAttributeInternal(APPLIEDAT, value);
    }

    /**
     * Gets the attribute value for PhoneNumber, using the alias name PhoneNumber.
     * @return the PhoneNumber
     */
    public Number getPhoneNumber() {
        return (Number)getAttributeInternal(PHONENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for PhoneNumber.
     * @param value value to set the PhoneNumber
     */
    public void setPhoneNumber(Number value) {
        setAttributeInternal(PHONENUMBER, value);
    }

    /**
     * Gets the attribute value for Sc, using the alias name Sc.
     * @return the Sc
     */
    public Number getSc() {
        return (Number)getAttributeInternal(SC);
    }

    /**
     * Gets the attribute value for PasswordTries, using the alias name PasswordTries.
     * @return the PasswordTries
     */
    public Number getPasswordTries() {
        return (Number)getAttributeInternal(PASSWORDTRIES);
    }

    /**
     * Sets <code>value</code> as the attribute value for PasswordTries.
     * @param value value to set the PasswordTries
     */
    public void setPasswordTries(Number value) {
        setAttributeInternal(PASSWORDTRIES, value);
    }

    /**
     * Gets the attribute value for CipherSuite, using the alias name CipherSuite.
     * @return the CipherSuite
     */
    public String getCipherSuite() {
        return (String)getAttributeInternal(CIPHERSUITE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CipherSuite.
     * @param value value to set the CipherSuite
     */
    public void setCipherSuite(String value) {
        setAttributeInternal(CIPHERSUITE, value);
    }

    /**
     * Gets the attribute value for CloseDate, using the alias name CloseDate.
     * @return the CloseDate
     */
    public Date getCloseDate() {
        return (Date)getAttributeInternal(CLOSEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CloseDate.
     * @param value value to set the CloseDate
     */
    public void setCloseDate(Date value) {
        setAttributeInternal(CLOSEDATE, value);
    }

    /**
     * Gets the attribute value for ANumber, using the alias name ANumber.
     * @return the ANumber
     */
    public String getANumber() {
        return (String)getAttributeInternal(ANUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for ANumber.
     * @param value value to set the ANumber
     */
    public void setANumber(String value) {
        setAttributeInternal(ANUMBER, value);
    }

    /**
     * Gets the attribute value for Hu, using the alias name Hu.
     * @return the Hu
     */
    public Number getHu() {
        return (Number)getAttributeInternal(HU);
    }

    /**
     * Sets <code>value</code> as the attribute value for Hu.
     * @param value value to set the Hu
     */
    public void setHu(Number value) {
        setAttributeInternal(HU, value);
    }

    /**
     * Gets the attribute value for Cid, using the alias name Cid.
     * @return the Cid
     */
    public Number getCid() {
        return (Number)getAttributeInternal(CID);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAccount() {
        return (RowIterator)getAttributeInternal(ACCOUNT);
    }

    /**
     * @return the associated entity kz.paysoft.paymobile.ui.adfextensions.ExtendedEntityImpl.
     */
    public ExtendedEntityImpl getClient() {
        return (ExtendedEntityImpl)getAttributeInternal(CLIENT);
    }

    /**
     * Sets <code>value</code> as the associated entity kz.paysoft.paymobile.ui.adfextensions.ExtendedEntityImpl.
     */
    public void setClient(ExtendedEntityImpl value) {
        setAttributeInternal(CLIENT, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> NotClosedContractsByPhoneNumber.
     */
    public RowSet getNotClosedContractsByPhoneNumber() {
        return (RowSet)getAttributeInternal(NOTCLOSEDCONTRACTSBYPHONENUMBER);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence id) {
        return new Key(new Object[]{id});
    }

    /**
     * Validation method for Contract.
     */
    public boolean validateContractUniqueness() {
        RowSet rs = getNotClosedContractsByPhoneNumber();
        rs.setNamedWhereClauseParam("P_PhoneNumber", getPhoneNumber());
        rs.setNamedWhereClauseParam("P_Id", getId());
        rs.executeQuery();
        if (rs.first() != null) {
            rs.closeRowSet();
            return false;
        } else {
            rs.closeRowSet();
            return true;
        }
    }
}
