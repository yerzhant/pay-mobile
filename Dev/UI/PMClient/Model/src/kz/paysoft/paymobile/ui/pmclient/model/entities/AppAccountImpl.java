package kz.paysoft.paymobile.ui.pmclient.model.entities;

import kz.paysoft.paymobile.ui.pmclient.model.MessageBundle;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 09 17:33:11 BDST 2010
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppAccountImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Id {
            public Object get(AppAccountImpl obj) {
                return obj.getId();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ApplicationId {
            public Object get(AppAccountImpl obj) {
                return obj.getApplicationId();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        Kind {
            public Object get(AppAccountImpl obj) {
                return obj.getKind();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setKind((String)value);
            }
        },
        AnInterface {
            public Object get(AppAccountImpl obj) {
                return obj.getAnInterface();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setAnInterface((String)value);
            }
        },
        ANumber {
            public Object get(AppAccountImpl obj) {
                return obj.getANumber();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setANumber((String)value);
            }
        },
        Name {
            public Object get(AppAccountImpl obj) {
                return obj.getName();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setName((String)value);
            }
        },
        Priority {
            public Object get(AppAccountImpl obj) {
                return obj.getPriority();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setPriority((Number)value);
            }
        },
        SingleAmount {
            public Object get(AppAccountImpl obj) {
                return obj.getSingleAmount();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setSingleAmount((Number)value);
            }
        },
        SingleCurrency {
            public Object get(AppAccountImpl obj) {
                return obj.getSingleCurrency();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setSingleCurrency((String)value);
            }
        },
        DayAmount {
            public Object get(AppAccountImpl obj) {
                return obj.getDayAmount();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setDayAmount((Number)value);
            }
        },
        DayCurrency {
            public Object get(AppAccountImpl obj) {
                return obj.getDayCurrency();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setDayCurrency((String)value);
            }
        },
        DayQuantity {
            public Object get(AppAccountImpl obj) {
                return obj.getDayQuantity();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setDayQuantity((Number)value);
            }
        },
        MonthAmount {
            public Object get(AppAccountImpl obj) {
                return obj.getMonthAmount();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setMonthAmount((Number)value);
            }
        },
        MonthCurrency {
            public Object get(AppAccountImpl obj) {
                return obj.getMonthCurrency();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setMonthCurrency((String)value);
            }
        },
        MonthQuantity {
            public Object get(AppAccountImpl obj) {
                return obj.getMonthQuantity();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setMonthQuantity((Number)value);
            }
        },
        FromHour {
            public Object get(AppAccountImpl obj) {
                return obj.getFromHour();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setFromHour((Number)value);
            }
        },
        FromMin {
            public Object get(AppAccountImpl obj) {
                return obj.getFromMin();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setFromMin((Number)value);
            }
        },
        ToHour {
            public Object get(AppAccountImpl obj) {
                return obj.getToHour();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setToHour((Number)value);
            }
        },
        ToMin {
            public Object get(AppAccountImpl obj) {
                return obj.getToMin();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setToMin((Number)value);
            }
        },
        Application {
            public Object get(AppAccountImpl obj) {
                return obj.getApplication();
            }

            public void put(AppAccountImpl obj, Object value) {
                obj.setApplication((ApplicationImpl)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppAccountImpl object);

        public abstract void put(AppAccountImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int APPLICATIONID = AttributesEnum.ApplicationId.index();
    public static final int KIND = AttributesEnum.Kind.index();
    public static final int ANINTERFACE = AttributesEnum.AnInterface.index();
    public static final int ANUMBER = AttributesEnum.ANumber.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int PRIORITY = AttributesEnum.Priority.index();
    public static final int SINGLEAMOUNT = AttributesEnum.SingleAmount.index();
    public static final int SINGLECURRENCY = AttributesEnum.SingleCurrency.index();
    public static final int DAYAMOUNT = AttributesEnum.DayAmount.index();
    public static final int DAYCURRENCY = AttributesEnum.DayCurrency.index();
    public static final int DAYQUANTITY = AttributesEnum.DayQuantity.index();
    public static final int MONTHAMOUNT = AttributesEnum.MonthAmount.index();
    public static final int MONTHCURRENCY = AttributesEnum.MonthCurrency.index();
    public static final int MONTHQUANTITY = AttributesEnum.MonthQuantity.index();
    public static final int FROMHOUR = AttributesEnum.FromHour.index();
    public static final int FROMMIN = AttributesEnum.FromMin.index();
    public static final int TOHOUR = AttributesEnum.ToHour.index();
    public static final int TOMIN = AttributesEnum.ToMin.index();
    public static final int APPLICATION = AttributesEnum.Application.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppAccountImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public DBSequence getId() {
        return (DBSequence)getAttributeInternal(ID);
    }

    /**
     * Gets the attribute value for ApplicationId, using the alias name ApplicationId.
     * @return the ApplicationId
     */
    public Number getApplicationId() {
        return (Number)getAttributeInternal(APPLICATIONID);
    }

    /**
     * Gets the attribute value for Kind, using the alias name Kind.
     * @return the Kind
     */
    public String getKind() {
        return (String)getAttributeInternal(KIND);
    }

    /**
     * Sets <code>value</code> as the attribute value for Kind.
     * @param value value to set the Kind
     */
    public void setKind(String value) {
        setAttributeInternal(KIND, value);
    }

    /**
     * Gets the attribute value for AnInterface, using the alias name AnInterface.
     * @return the AnInterface
     */
    public String getAnInterface() {
        return (String)getAttributeInternal(ANINTERFACE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AnInterface.
     * @param value value to set the AnInterface
     */
    public void setAnInterface(String value) {
        setAttributeInternal(ANINTERFACE, value);
    }

    /**
     * Gets the attribute value for ANumber, using the alias name ANumber.
     * @return the ANumber
     */
    public String getANumber() {
        return (String)getAttributeInternal(ANUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for ANumber.
     * @param value value to set the ANumber
     */
    public void setANumber(String value) {
        setAttributeInternal(ANUMBER, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the Name
     */
    public String getName() {
        return (String)getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for Priority, using the alias name Priority.
     * @return the Priority
     */
    public Number getPriority() {
        return (Number)getAttributeInternal(PRIORITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Priority.
     * @param value value to set the Priority
     */
    public void setPriority(Number value) {
        setAttributeInternal(PRIORITY, value);
    }

    /**
     * Gets the attribute value for SingleAmount, using the alias name SingleAmount.
     * @return the SingleAmount
     */
    public Number getSingleAmount() {
        return (Number)getAttributeInternal(SINGLEAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for SingleAmount.
     * @param value value to set the SingleAmount
     */
    public void setSingleAmount(Number value) {
        setAttributeInternal(SINGLEAMOUNT, value);
    }

    /**
     * Gets the attribute value for SingleCurrency, using the alias name SingleCurrency.
     * @return the SingleCurrency
     */
    public String getSingleCurrency() {
        return (String)getAttributeInternal(SINGLECURRENCY);
    }

    /**
     * Sets <code>value</code> as the attribute value for SingleCurrency.
     * @param value value to set the SingleCurrency
     */
    public void setSingleCurrency(String value) {
        setAttributeInternal(SINGLECURRENCY, value);
    }

    /**
     * Gets the attribute value for DayAmount, using the alias name DayAmount.
     * @return the DayAmount
     */
    public Number getDayAmount() {
        return (Number)getAttributeInternal(DAYAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DayAmount.
     * @param value value to set the DayAmount
     */
    public void setDayAmount(Number value) {
        setAttributeInternal(DAYAMOUNT, value);
    }

    /**
     * Gets the attribute value for DayCurrency, using the alias name DayCurrency.
     * @return the DayCurrency
     */
    public String getDayCurrency() {
        return (String)getAttributeInternal(DAYCURRENCY);
    }

    /**
     * Sets <code>value</code> as the attribute value for DayCurrency.
     * @param value value to set the DayCurrency
     */
    public void setDayCurrency(String value) {
        setAttributeInternal(DAYCURRENCY, value);
    }

    /**
     * Gets the attribute value for DayQuantity, using the alias name DayQuantity.
     * @return the DayQuantity
     */
    public Number getDayQuantity() {
        return (Number)getAttributeInternal(DAYQUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for DayQuantity.
     * @param value value to set the DayQuantity
     */
    public void setDayQuantity(Number value) {
        setAttributeInternal(DAYQUANTITY, value);
    }

    /**
     * Gets the attribute value for MonthAmount, using the alias name MonthAmount.
     * @return the MonthAmount
     */
    public Number getMonthAmount() {
        return (Number)getAttributeInternal(MONTHAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for MonthAmount.
     * @param value value to set the MonthAmount
     */
    public void setMonthAmount(Number value) {
        setAttributeInternal(MONTHAMOUNT, value);
    }

    /**
     * Gets the attribute value for MonthCurrency, using the alias name MonthCurrency.
     * @return the MonthCurrency
     */
    public String getMonthCurrency() {
        return (String)getAttributeInternal(MONTHCURRENCY);
    }

    /**
     * Sets <code>value</code> as the attribute value for MonthCurrency.
     * @param value value to set the MonthCurrency
     */
    public void setMonthCurrency(String value) {
        setAttributeInternal(MONTHCURRENCY, value);
    }

    /**
     * Gets the attribute value for MonthQuantity, using the alias name MonthQuantity.
     * @return the MonthQuantity
     */
    public Number getMonthQuantity() {
        return (Number)getAttributeInternal(MONTHQUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for MonthQuantity.
     * @param value value to set the MonthQuantity
     */
    public void setMonthQuantity(Number value) {
        setAttributeInternal(MONTHQUANTITY, value);
    }

    /**
     * Gets the attribute value for FromHour, using the alias name FromHour.
     * @return the FromHour
     */
    public Number getFromHour() {
        return (Number)getAttributeInternal(FROMHOUR);
    }

    /**
     * Sets <code>value</code> as the attribute value for FromHour.
     * @param value value to set the FromHour
     */
    public void setFromHour(Number value) {
        setAttributeInternal(FROMHOUR, value);
    }

    /**
     * Gets the attribute value for FromMin, using the alias name FromMin.
     * @return the FromMin
     */
    public Number getFromMin() {
        return (Number)getAttributeInternal(FROMMIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for FromMin.
     * @param value value to set the FromMin
     */
    public void setFromMin(Number value) {
        setAttributeInternal(FROMMIN, value);
    }

    /**
     * Gets the attribute value for ToHour, using the alias name ToHour.
     * @return the ToHour
     */
    public Number getToHour() {
        return (Number)getAttributeInternal(TOHOUR);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToHour.
     * @param value value to set the ToHour
     */
    public void setToHour(Number value) {
        setAttributeInternal(TOHOUR, value);
    }

    /**
     * Gets the attribute value for ToMin, using the alias name ToMin.
     * @return the ToMin
     */
    public Number getToMin() {
        return (Number)getAttributeInternal(TOMIN);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToMin.
     * @param value value to set the ToMin
     */
    public void setToMin(Number value) {
        setAttributeInternal(TOMIN, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity ApplicationImpl.
     */
    public ApplicationImpl getApplication() {
        return (ApplicationImpl)getAttributeInternal(APPLICATION);
    }

    /**
     * Sets <code>value</code> as the associated entity ApplicationImpl.
     */
    public void setApplication(ApplicationImpl value) {
        setAttributeInternal(APPLICATION, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("kz.paysoft.paymobile.ui.pmclient.model.entities.AppAccount");
        }
        return mDefinitionObject;
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (!getApplication().getStatus().equals("P")) {
            throw new JboException(MessageBundle.class, MessageBundle.OPERATION_NOT_PERMITTED, null);
        }
        super.doDML(operation, e);
    }
}
