/*
 * Copyright (C) 2010 PaySoft, LLP. All Rights Reserved.
 *
 * 2010.03.25   Yerzhan Tulepov         Created.
 */
package kz.paysoft.paymobile.midletparams;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class MIDLetParamsView extends FrameView {

    private static final byte FILE_VERSION = 1;
    private static final byte ASN1_SEQUENCE_TAG = 0x30;
    private static final byte ASN1_SET_TAG = 0x31;
    private static final byte ASN1_OID_TAG = 0x06;
    private static final byte ASN1_PRINTABLE_STRING_TAG = 0x13;
    private static final byte X509_DN_CN[] = {0x55, 0x04, 0x03};
    private static final byte X509_DN_SN[] = {0x55, 0x04, 0x04};
    private static final byte X509_DN_C[] = {0x55, 0x04, 0x06};
    private static final byte X509_DN_L[] = {0x55, 0x04, 0x07};
    private static final byte X509_DN_ST[] = {0x55, 0x04, 0x08};
    private static final byte X509_DN_STREET[] = {0x55, 0x04, 0x09};
    private static final byte X509_DN_O[] = {0x55, 0x04, 0x0A};
    private static final byte X509_DN_OU[] = {0x55, 0x04, 0x0B};
    private static final byte X509_DN_EMAIL[] = {0x2A, (byte) 0x86, 0x48, (byte) 0x86, (byte) 0xF7, 0x0D, 0x01, 0x09, 0x01};

    public MIDLetParamsView(SingleFrameApplication app) {
        super(app);
        initComponents();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = MIDLetParamsApp.getApplication().getMainFrame();
            aboutBox = new MIDLetParamsAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        MIDLetParamsApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        issuer = new javax.swing.JTextField();
        subject = new javax.swing.JTextField();
        type = new javax.swing.JTextField();
        version = new javax.swing.JTextField();
        signatureAlgorithm = new javax.swing.JTextField();
        serialNumber = new javax.swing.JTextField();
        notBefore = new javax.swing.JTextField();
        notAfter = new javax.swing.JTextField();
        notBeforeLabel = new javax.swing.JLabel();
        notAfterLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        smppServerTelNumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        processorId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        serverAddress = new javax.swing.JTextField();
        serverPort = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        certificateData = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kz.paysoft.paymobile.midletparams.MIDLetParamsApp.class).getContext().getResourceMap(MIDLetParamsView.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        issuer.setText(resourceMap.getString("issuer.text")); // NOI18N
        issuer.setToolTipText(resourceMap.getString("issuer.toolTipText")); // NOI18N
        issuer.setName("issuer"); // NOI18N

        subject.setText(resourceMap.getString("subject.text")); // NOI18N
        subject.setToolTipText(resourceMap.getString("subject.toolTipText")); // NOI18N
        subject.setName("subject"); // NOI18N

        type.setText(resourceMap.getString("type.text")); // NOI18N
        type.setName("type"); // NOI18N

        version.setText(resourceMap.getString("version.text")); // NOI18N
        version.setName("version"); // NOI18N

        signatureAlgorithm.setText(resourceMap.getString("signatureAlgorithm.text")); // NOI18N
        signatureAlgorithm.setName("signatureAlgorithm"); // NOI18N

        serialNumber.setText(resourceMap.getString("serialNumber.text")); // NOI18N
        serialNumber.setToolTipText(resourceMap.getString("serialNumber.toolTipText")); // NOI18N
        serialNumber.setName("serialNumber"); // NOI18N

        notBefore.setText(resourceMap.getString("notBefore.text")); // NOI18N
        notBefore.setName("notBefore"); // NOI18N
        notBefore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notBeforeActionPerformed(evt);
            }
        });

        notAfter.setText(resourceMap.getString("notAfter.text")); // NOI18N
        notAfter.setName("notAfter"); // NOI18N
        notAfter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notAfterActionPerformed(evt);
            }
        });

        notBeforeLabel.setText(resourceMap.getString("notBeforeLabel.text")); // NOI18N
        notBeforeLabel.setName("notBeforeLabel"); // NOI18N

        notAfterLabel.setText(resourceMap.getString("notAfterLabel.text")); // NOI18N
        notAfterLabel.setName("notAfterLabel"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(notAfter, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(notBefore, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(notAfterLabel)
                            .addComponent(notBeforeLabel)))
                    .addComponent(version, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(signatureAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(issuer, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addComponent(subject, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(issuer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(subject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(version, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(signatureAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(serialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(notBefore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notBeforeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(notAfter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notAfterLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        smppServerTelNumber.setText(resourceMap.getString("smppServerTelNumber.text")); // NOI18N
        smppServerTelNumber.setName("smppServerTelNumber"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        processorId.setText(resourceMap.getString("processorId.text")); // NOI18N
        processorId.setName("processorId"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        serverAddress.setText(resourceMap.getString("serverAddress.text")); // NOI18N
        serverAddress.setName("serverAddress"); // NOI18N

        serverPort.setText(resourceMap.getString("serverPort.text")); // NOI18N
        serverPort.setName("serverPort"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(serverAddress)
                    .addComponent(smppServerTelNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(processorId)
                    .addComponent(serverPort, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(smppServerTelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(serverAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(processorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.title"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        certificateData.setColumns(20);
        certificateData.setEditable(false);
        certificateData.setFont(resourceMap.getFont("certificateData.font")); // NOI18N
        certificateData.setRows(5);
        certificateData.setName("certificateData"); // NOI18N
        jScrollPane1.setViewportView(certificateData);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(kz.paysoft.paymobile.midletparams.MIDLetParamsApp.class).getContext().getActionMap(MIDLetParamsView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText(resourceMap.getString("jMenuItem4.text")); // NOI18N
        jMenuItem4.setName("jMenuItem4"); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText(resourceMap.getString("jMenuItem5.text")); // NOI18N
        jMenuItem5.setName("jMenuItem5"); // NOI18N
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        menuBar.add(jMenu2);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void notBeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notBeforeActionPerformed
        notBeforeLabel.setText("Date: " + new Date(Long.parseLong(notBefore.getText())));
    }//GEN-LAST:event_notBeforeActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JFileChooser fc = new JFileChooser(".");
        if (fc.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
            try {
                CertificateFactory cf = CertificateFactory.getInstance("X.509");
                Collection<? extends Certificate> coll = cf.generateCertificates(new FileInputStream(fc.getSelectedFile().getAbsolutePath()));
                Iterator<? extends Certificate> iter = coll.iterator();
                for (int i = 1; i <= coll.size(); i++) {
                    certificateData.setText("===== START OF CERTIFICATE #" + i + " =====\n");
                    certificateData.append(iter.next().toString());
                    certificateData.append("\n===== END OF CERTIFICATE #" + i + " =====\n");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(mainPanel, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFileChooser fc = new JFileChooser(".");
        if (fc.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
            int certNumber = Integer.parseInt(JOptionPane.showInputDialog(mainPanel, "Enter certificate #", "1"));
            try {
                CertificateFactory cf = CertificateFactory.getInstance("X.509");
                Collection<? extends Certificate> coll = cf.generateCertificates(new FileInputStream(fc.getSelectedFile().getAbsolutePath()));
                Iterator<? extends Certificate> iter = coll.iterator();
                for (int i = 1; i <= coll.size(); i++) {
                    if (i == certNumber) {
                        X509Certificate cert = (X509Certificate) iter.next();
                        type.setText(cert.getType());
                        version.setText(String.valueOf(cert.getVersion()));
                        signatureAlgorithm.setText(cert.getSigAlgName());
                        notBefore.setText(Long.toString(cert.getNotBefore().getTime()));
                        notAfter.setText(Long.toString(cert.getNotAfter().getTime()));
                        notBeforeActionPerformed(evt);
                        notAfterActionPerformed(evt);

                        DataInputStream in = new DataInputStream(new ByteArrayInputStream(cert.getIssuerX500Principal().getEncoded()));
                        String string = "";
                        while (in.available() != 0) {
                            string += parseDN(in);
                        }
                        string = string.substring(0, string.length() - 1);
                        issuer.setText(string);

                        in = new DataInputStream(new ByteArrayInputStream(cert.getSubjectX500Principal().getEncoded()));
                        string = "";
                        while (in.available() != 0) {
                            string += parseDN(in);
                        }
                        string = string.substring(0, string.length() - 1);
                        subject.setText(string);

                        byte data[] = cert.getSerialNumber().toByteArray();
                        string = "";
                        for (int j = 0; j < data.length; j++) {
                            string += String.format("%02x:", data[j]).toUpperCase();
                        }
                        serialNumber.setText(string.substring(0, string.length() - 1));
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(mainPanel, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private String parseDN(DataInputStream in) throws Exception {
        byte data[];
        switch (in.readByte()) {
            case ASN1_SEQUENCE_TAG:
            case ASN1_SET_TAG:
                in.readByte();
                return "";

            case ASN1_OID_TAG:
                data = new byte[in.readByte()];
                in.readFully(data, 0, data.length);
                if (Arrays.equals(data, X509_DN_C)) {
                    return "C=" + parseDN(in);
                } else if (Arrays.equals(data, X509_DN_CN)) {
                    return "CN=" + parseDN(in);
                } else if (Arrays.equals(data, X509_DN_EMAIL)) {
                    return "EmailAddress=" + parseDN(in);
                } else if (Arrays.equals(data, X509_DN_L)) {
                    return "L=" + parseDN(in);
                } else if (Arrays.equals(data, X509_DN_O)) {
                    return "O=" + parseDN(in);
                } else if (Arrays.equals(data, X509_DN_OU)) {
                    return "OU=" + parseDN(in);
                } else if (Arrays.equals(data, X509_DN_SN)) {
                    return "SN=" + parseDN(in);
                } else if (Arrays.equals(data, X509_DN_ST)) {
                    return "ST=" + parseDN(in);
                } else if (Arrays.equals(data, X509_DN_STREET)) {
                    return "STREET=" + parseDN(in);
                } else {
                    return Arrays.toString(data) + "=" + parseDN(in);
                }

            case ASN1_PRINTABLE_STRING_TAG:
                data = new byte[in.readByte()];
                in.readFully(data, 0, data.length);
                return new String(data) + ";";

            default:
                throw new Exception("Unsupported tag");
        }
    }

    private void notAfterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notAfterActionPerformed
        notAfterLabel.setText("Date: " + new Date(Long.parseLong(notAfter.getText())));
    }//GEN-LAST:event_notAfterActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser fc = new JFileChooser(".");
        if (fc.showSaveDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
            try {
                FileOutputStream file = new FileOutputStream(fc.getSelectedFile().getAbsolutePath());
                DataOutputStream out = new DataOutputStream(file);

                out.writeByte(FILE_VERSION);
                out.writeUTF(smppServerTelNumber.getText());
                out.writeShort(Short.parseShort(processorId.getText()));
                out.writeUTF(serverAddress.getText());
                out.writeShort(Short.parseShort(serverPort.getText()));
                out.writeUTF(issuer.getText());
                out.writeUTF(subject.getText());
                out.writeUTF(type.getText());
                out.writeUTF(version.getText());
                out.writeUTF(signatureAlgorithm.getText());
                out.writeUTF(serialNumber.getText());
                out.writeLong(Long.parseLong(notBefore.getText()));
                out.writeLong(Long.parseLong(notAfter.getText()));

                out.close();
                file.close();

                JOptionPane.showMessageDialog(mainPanel, "Saved successfully.");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(mainPanel, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        JFileChooser fc = new JFileChooser(".");
        if (fc.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
            int certNumber = Integer.parseInt(JOptionPane.showInputDialog(mainPanel, "Enter certificate #", "1"));
            try {
                CertificateFactory cf = CertificateFactory.getInstance("X.509");
                Collection<? extends Certificate> coll = cf.generateCertificates(new FileInputStream(fc.getSelectedFile().getAbsolutePath()));
                Iterator<? extends Certificate> iter = coll.iterator();
                for (int i = 1; i <= coll.size(); i++) {
                    if (i == certNumber) {
                        X509Certificate cert = (X509Certificate) iter.next();
                        certificateData.append("\n===== Issuer Principal encoding =====\n");
                        byte data[] = cert.getIssuerX500Principal().getEncoded();
                        for (int j = 0; j < data.length; j++) {
                            certificateData.append(String.format("%c[%02x] ", data[j], data[j]));
                        }
                        certificateData.append("\n===== Subject Principal encoding =====\n");
                        data = cert.getIssuerX500Principal().getEncoded();
                        for (int j = 0; j < data.length; j++) {
                            certificateData.append(String.format("%c[%02x] ", data[j], data[j]));
                        }
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(mainPanel, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser fc = new JFileChooser(".");
        if (fc.showOpenDialog(mainPanel) == JFileChooser.APPROVE_OPTION) {
            try {
                FileInputStream file = new FileInputStream(fc.getSelectedFile().getAbsolutePath());
                DataInputStream in = new DataInputStream(file);

                if (in.readByte() == FILE_VERSION) {
                    smppServerTelNumber.setText(in.readUTF());
                    processorId.setText(String.valueOf(in.readUnsignedShort()));
                    serverAddress.setText(in.readUTF());
                    serverPort.setText(String.valueOf(in.readUnsignedShort()));
                    issuer.setText(in.readUTF());
                    subject.setText(in.readUTF());
                    type.setText(in.readUTF());
                    version.setText(in.readUTF());
                    signatureAlgorithm.setText(in.readUTF());
                    serialNumber.setText(in.readUTF());
                    notBefore.setText(String.valueOf(in.readLong()));
                    notAfter.setText(String.valueOf(in.readLong()));
                    notBeforeActionPerformed(evt);
                    notAfterActionPerformed(evt);
                } else {
                    in.close();
                    file.close();
                    throw new Exception("Incorrect version.");
                }

                in.close();
                file.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(mainPanel, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea certificateData;
    private javax.swing.JTextField issuer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField notAfter;
    private javax.swing.JLabel notAfterLabel;
    private javax.swing.JTextField notBefore;
    private javax.swing.JLabel notBeforeLabel;
    private javax.swing.JTextField processorId;
    private javax.swing.JTextField serialNumber;
    private javax.swing.JTextField serverAddress;
    private javax.swing.JTextField serverPort;
    private javax.swing.JTextField signatureAlgorithm;
    private javax.swing.JTextField smppServerTelNumber;
    private javax.swing.JTextField subject;
    private javax.swing.JTextField type;
    private javax.swing.JTextField version;
    // End of variables declaration//GEN-END:variables
    private JDialog aboutBox;
}
